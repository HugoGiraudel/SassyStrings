// Calculating Levenshtein distance between two strings
// ----------------------------------------------------------------------------------------------------
// @param $a: first string
// @param $b: second string
// ----------------------------------------------------------------------------------------------------
// @return [number]

@function levenshtein($a, $b) {
  @if type-of($a) != "string" {
    @warn "`str-count` function expecting a string for $a; #{type-of($a)} given.";
    @return false;
  }

  @if type-of($b) != "string" {
    @warn "`str-count` function expecting a string for $b; #{type-of($b)} given.";
    @return false;
  }

  $a: to-lower-case($a);
  $b: to-lower-case($b);

  $n: str-length($a);
  $m: str-length($b);

  $matrix: _matrix($n + 1, $m + 1);
  $cost: _matrix($n, $m);

  @if $a == $b { @return 0; }
  @if $n == 0  { @return $m; }
  @if $m == 0  { @return $n; }

  @for $i from 0 through $n  {
    @for $j from 0 through $m  {
      $v: if($i == 0, $j, if($j == 0, $i, 0));
      @if $v != 0 {
        $matrix: _set-matrix($matrix, $i + 1, $j + 1, $v);
      }
      @if $i != 0 and $j != 0 {
        $v: if(str-slice($a, $i, $i) == str-slice($b, $j, $j), 0, 1);
        @if $v != 0 {
          $cost: _set-matrix($cost, $i, $j, $v);
        }
      }
    }
  }

  @for $i from 2 through length($matrix) {
    @for $j from 2 through length(nth($matrix, $i)) {
      $matrix: _set-matrix($matrix, $i, $j, min(_e($matrix, $i - 1, $j) + 1, _e($matrix, $i, $j - 1) + 1, _e($matrix, $i - 1, $j - 1) + _e($cost, $i - 1, $j - 1)));
    }
  }

  @return _e($matrix, length($matrix), length(nth($matrix, 1)));
}


// Helper to target an element in a matrix
// ----------------------------------------------------------------------------------------------------
// @param $m: matrix
// @param $x: x coord
// @param $y: y coord
// ----------------------------------------------------------------------------------------------------
// @return [literal]

@function _e($m, $x, $y) {
  @return nth(nth($m, $x), $y);
}

// Helper instanciation a matrix of $x by $y
// ----------------------------------------------------------------------------------------------------
// @param $x: number of cols
// @param $y: number of lines
// ----------------------------------------------------------------------------------------------------
// @return [list]

@function _matrix($x, $y) {
  $matrix: ();
  @for $i from 1 through $x {
    $tmp: ();
    @for $y from 1 through $y {
      $tmp: append($tmp, 0)
    }
    $matrix: append($matrix, $tmp);
  }
  @return $matrix;
}

// Helper assigning $value at $matrix[$x, $y]
// ----------------------------------------------------------------------------------------------------
// @param $matrix: matrix to update
// @param $x: x coord
// @param $y: y coord
// @param $value: value to assign at $matrix[$x, $y]
// ----------------------------------------------------------------------------------------------------
// @return [list]

@function _set-matrix($matrix, $x, $y, $value) {
  @return set-nth($matrix, $x, set-nth(nth($matrix, $x), $y, $value));
}